plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}
def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdk globalConfiguration["androidCompileSDK"]

    defaultConfig {
        minSdk globalConfiguration["androidMinSDK"]
        targetSdk globalConfiguration["androidCompileSDK"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    aaptOptions {
        noCompress "tflite"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    def ext = rootProject.ext
    implementation(
            ext.libDependencies.kotlin,
            ext.libDependencies.kotlinKtx,
            ext.uiDependencies.material,
            ext.libDependencies.gson,
            ext.libDependencies.opencv,
            ext.libDependencies.cameraXCore,
            ext.libDependencies.cameraXCamera2,
            ext.libDependencies.cameraXLifecycle,
            ext.libDependencies.cameraXView,
            ext.libDependencies.cameraXExtension,
            ext.libDependencies.workManager,
    )

    implementation(
            ext.mlKitDependencies.barcodeScanner,
            ext.mlKitDependencies.faceDetector,
            ext.mlKitDependencies.imageLabeling,
            ext.mlKitDependencies.textRecognizer,
    )

    testImplementation(
            ext.testDependencies.junit,
            ext.testDependencies.truth,
    )

    androidTestImplementation(
            ext.testDependencies.testRule,
            ext.testDependencies.testRunner,
    )
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            debug(MavenPublication) {
                from components.release
//                println("Components: " + components*.name)
                artifact androidSourcesJar
                version = globalConfiguration["androidVersionName"]
            }
        }
    }
}
